"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/comma-number";
exports.ids = ["vendor-chunks/comma-number"];
exports.modules = {

/***/ "(rsc)/./node_modules/comma-number/index.js":
/*!********************************************!*\
  !*** ./node_modules/comma-number/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n// return a string with the provided number formatted with commas.\n// can specify either a Number or a String.\nfunction commaNumber(inputNumber, optionalSeparator, optionalDecimalChar) {\n    // default `decimalChar` is a period\n    const decimalChar = optionalDecimalChar || \".\";\n    let stringNumber // we assign this in the switch block and need it later.\n    ;\n    {\n        let number // we assign this in the switch block and need it right after.\n        ;\n        switch(typeof inputNumber){\n            case \"string\":\n                // if there aren't enough digits to need separators then return it\n                // NOTE: some numbers which are too small will get passed this\n                //       when they have decimal values which make them too long here.\n                //       but, the number value check after this switch will catch it.\n                if (inputNumber.length < (inputNumber[0] === \"-\" ? 5 : 4)) {\n                    return inputNumber;\n                }\n                // remember it as a string in `stringNumber` and convert to a Number\n                stringNumber = inputNumber;\n                // if they're not using the Node standard decimal char then replace it\n                // before converting.\n                number = Number(decimalChar !== \".\" ? stringNumber.replace(decimalChar, \".\") : stringNumber);\n                break;\n            // convert to a string.\n            // NOTE: don't check if the number is too small before converting\n            //       because we'll need to return `stringNumber` anyway.\n            case \"number\":\n                stringNumber = String(inputNumber);\n                number = inputNumber;\n                // create the string version with the decimalChar they specified.\n                // this matches what the above case 'string' produces,\n                // and, fixes the bug *not* doing this caused.\n                if (\".\" !== decimalChar && !Number.isInteger(inputNumber)) {\n                    stringNumber = stringNumber.replace(\".\", decimalChar);\n                }\n                break;\n            // return invalid type as-is\n            default:\n                return inputNumber;\n        }\n        // when it doesn't need a separator or isn't a number then return it\n        if (-1000 < number && number < 1000 || isNaN(number) || !isFinite(number)) {\n            return stringNumber;\n        }\n    }\n    {\n        // strip off decimal value to add back in later\n        const decimalIndex = stringNumber.lastIndexOf(decimalChar);\n        let decimal;\n        if (decimalIndex > -1) {\n            decimal = stringNumber.slice(decimalIndex);\n            stringNumber = stringNumber.slice(0, decimalIndex);\n        }\n        // finally, parse the string. Note, default 'separator' is a comma.\n        const parts = parse(stringNumber, optionalSeparator || \",\");\n        // if there's a decimal value then add it to the parts.\n        if (decimal) {\n            parts.push(decimal);\n        }\n        // combine all parts for the final string (note, has separators).\n        return parts.join(\"\");\n    }\n}\nfunction parse(string, separator) {\n    // find first index to split the string at (where 1st separator goes).\n    let i = (string.length - 1) % 3 + 1;\n    // above calculation is wrong when num is negative and a certain size.\n    if (i === 1 && string[0] === \"-\") {\n        i = 4 // example: -123,456,789  start at 4, not 1.\n        ;\n    }\n    const strings = [\n        string.slice(0, i) // grab part before the first separator\n    ];\n    // split remaining string in groups of 3 where a separator belongs\n    for(; i < string.length; i += 3){\n        strings.push(separator, string.substr(i, 3));\n    }\n    return strings;\n}\n// convenience function for currying style:\n//   const format = commaNumber.bindWith(',', '.')\nfunction bindWith(separator, decimalChar) {\n    return function(number) {\n        return commaNumber(number, separator, decimalChar);\n    };\n}\nmodule.exports = commaNumber;\nmodule.exports.bindWith = bindWith;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/comma-number/index.js\n");

/***/ })

};
;